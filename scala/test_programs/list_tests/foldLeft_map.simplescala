{
  // intEqual: Int => Int => Boolean
  val intEqual = x => y => x <= y && y <= x

  // addMap: (Int => Option[Int]) => Int => Int => Int => Option[Int]
  val addMap = map => key => value => x => if (intEqual(key)(x)) Some(value) else map(key)

  // addMapPair: (Int => Option[Int]) => (Int, Int) => Int => Option[Int]
  val addMapPair = map => pair => pair match { case (first, second) => addMap(map)(first)(second) }

  // emptyMap: (Int => Option[Int])
  val emptyMap = x => None(unit)

  // pairList: List[(Int, Int)]
  val pairList = Cons(((1, 2), Cons(((1, 3), Nil(unit)))))

  // wholeMap: Int => Option[Int]
  val wholeMap = foldLeft(pairList)(emptyMap)(addMapPair)
  wholeMap(1)
}
;;;
Some(3)
;;;
Option[Int]
